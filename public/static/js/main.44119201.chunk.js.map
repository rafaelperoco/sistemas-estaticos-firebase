{"version":3,"sources":["components/icons/ClipboardIcon.js","App.js","characters.js","messages.js","serviceWorker.js","index.js"],"names":["ClipboardIcon","className","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","toast","configure","App","useState","password","setPassword","passwordLength","setPasswordLength","includeUppercase","setIncludeUppercase","includeLowercase","setIncludeLowercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","copyBtn","useRef","handleGeneratePassword","e","characterList","createPassword","notify","characterListLength","length","i","characterIndex","getRandomIndex","charAt","limit","Math","round","random","useEffect","message","hasError","error","position","POSITION","TOP_CENTER","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onClick","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","current","disabled","setTimeout","copyToClipboard","ref","htmlFor","name","id","type","max","min","defaultValue","onChange","target","value","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.44119201.chunk.js","sourcesContent":["import React from 'react'\n\nconst ClipboardIcon = () => {\n  return (\n    <svg className=\"clipboard-icon\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"far\" data-icon=\"clipboard\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path fill=\"currentColor\" d=\"M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm144 418c0 3.3-2.7 6-6 6H54c-3.3 0-6-2.7-6-6V118c0-3.3 2.7-6 6-6h42v36c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-36h42c3.3 0 6 2.7 6 6z\"></path></svg>\n  )\n}\n\nexport default ClipboardIcon;","import React, { useState, useRef, useEffect } from \"react\";\n\nimport ClipboardIcon from \"./components/icons/ClipboardIcon\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { COPY_SUCCESS } from \"./messages\";\nimport {\n  numbers,\n  lowerCaseLettters,\n  upperCaseLetters,\n  specialCharacters,\n} from \"./characters\";\n\ntoast.configure();\n\nfunction App() {\n  const [password, setPassword] = useState(\"\");\n  // const [copyBtnText, setCopyBtnText] = useState(\"COPY\");\n  const [passwordLength, setPasswordLength] = useState(20);\n  const [includeUppercase, setIncludeUppercase] = useState(true);\n  const [includeLowercase, setIncludeLowercase] = useState(true);\n  const [includeNumbers, setIncludeNumbers] = useState(true);\n  const [includeSymbols, setIncludeSymbols] = useState(true);\n\n  const copyBtn = useRef();\n\n  const handleGeneratePassword = (e) => {\n    if (\n      !includeUppercase &&\n      !includeLowercase &&\n      !includeNumbers &&\n      !includeSymbols\n    ) {\n      debugger;\n      notify(\"You must select at least one option\", true);\n\n      return;\n    }\n\n    let characterList = \"\";\n\n    if (includeLowercase) {\n      characterList += lowerCaseLettters;\n    }\n\n    if (includeUppercase) {\n      characterList += upperCaseLetters;\n    }\n\n    if (includeNumbers) {\n      characterList += numbers;\n    }\n\n    if (specialCharacters) {\n      characterList += specialCharacters;\n    }\n\n    setPassword(createPassword(characterList));\n  };\n\n  const createPassword = (characterList) => {\n    let password = \"\";\n    const characterListLength = characterList.length;\n\n    for (let i = 0; i < passwordLength; i++) {\n      const characterIndex = getRandomIndex(characterListLength);\n      password += characterList.charAt(characterIndex);\n    }\n\n    return password;\n  };\n\n  const getRandomIndex = (limit) => {\n    return Math.round(Math.random() * limit);\n  };\n\n  useEffect(() => {\n    handleGeneratePassword();\n    // eslint-disable-next-line\n  }, []);\n\n  const copyToClipboard = () => {\n    const newTextArea = document.createElement(\"textarea\");\n    newTextArea.innerText = password;\n    document.body.appendChild(newTextArea);\n    newTextArea.select();\n    document.execCommand(\"copy\");\n    newTextArea.remove();\n\n    copyBtn.current.disabled = true;\n    setTimeout(() => {\n      copyBtn.current.disabled = false;\n    }, 3000);\n  };\n\n  const notify = (message, hasError = false) => {\n    if (hasError) {\n      toast.error(message, {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    } else {\n      toast(message, {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n\n  const handleCopyPassword = (e) => {\n    copyToClipboard();\n\n    notify(COPY_SUCCESS);\n  };\n\n  return (\n    <div className=\"m-container\">\n      <div className=\"m-generator\">\n        <h2 className=\"m-generator__header\">Password Generator</h2>\n\n        <div className=\"m-generator__password\">\n          {password}\n          <button\n            className=\"m-generator__passwordGenerateBtn\"\n            onClick={handleCopyPassword}\n            ref={copyBtn}\n          >\n            <ClipboardIcon />\n            {/* {copyBtnText} */}\n          </button>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"password-length\">Password length</label>\n          <input\n            name=\"password-length\"\n            id=\"password-length\"\n            type=\"number\"\n            max=\"20\"\n            min=\"10\"\n            defaultValue={passwordLength}\n            onChange={(e) => setPasswordLength(e.target.value)}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"uppercase-letters\">Include uppercase letters</label>\n          <input\n            id=\"uppercase-letters\"\n            name=\"uppercase-letters\"\n            type=\"checkbox\"\n            checked={includeUppercase}\n            onChange={(e) => setIncludeUppercase(e.target.checked)}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"lowercase-letters\">Include lowercase letters</label>\n          <input\n            id=\"lowercase-letters\"\n            name=\"lowercase-letters\"\n            type=\"checkbox\"\n            checked={includeLowercase}\n            onChange={(e) => setIncludeLowercase(e.target.checked)}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"include-numbers\">Include Numbers</label>\n          <input\n            id=\"include-numbers\"\n            name=\"include-numbers\"\n            type=\"checkbox\"\n            checked={includeNumbers}\n            onChange={(e) => setIncludeNumbers(e.target.checked)}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"include-symbols\">Include Symbols</label>\n          <input\n            id=\"include-symbols\"\n            name=\"include-symbols\"\n            type=\"checkbox\"\n            checked={includeSymbols}\n            onChange={(e) => setIncludeSymbols(e.target.checked)}\n          />\n        </div>\n\n        <button className=\"m-generator__btn\" onClick={handleGeneratePassword}>\n          Generate Password\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const numbers = \"0123456789\";\nexport const upperCaseLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nexport const lowerCaseLettters = \"abcdefghijklmnopqrstuvwxyz\";\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","export const COPY_SUCCESS = \"Password successfully copied to clipboard\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"./main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}